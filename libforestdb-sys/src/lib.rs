/* automatically generated by rust-bindgen */

#![allow(dead_code,
         non_camel_case_types,
         non_upper_case_globals,
         non_snake_case)]
pub type int8_t = i8;
pub type int16_t = i16;
pub type int32_t = i32;
pub type int64_t = i64;
pub type uint8_t = u8;
pub type uint16_t = u16;
pub type uint32_t = u32;
pub type uint64_t = u64;
pub type int_least8_t = ::std::os::raw::c_char;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_char;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intptr_t = isize;
pub type uintptr_t = usize;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type ptrdiff_t = isize;
pub type size_t = usize;
pub type wchar_t = ::std::os::raw::c_int;
pub const FDB_RESULT_LAST: fdb_status = fdb_status::FDB_RESULT_LOCK_FAIL;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug, Eq, PartialEq)]
pub enum fdb_status {
    FDB_RESULT_SUCCESS = 0,
    FDB_RESULT_INVALID_ARGS = -1,
    FDB_RESULT_OPEN_FAIL = -2,
    FDB_RESULT_NO_SUCH_FILE = -3,
    FDB_RESULT_WRITE_FAIL = -4,
    FDB_RESULT_READ_FAIL = -5,
    FDB_RESULT_CLOSE_FAIL = -6,
    FDB_RESULT_COMMIT_FAIL = -7,
    FDB_RESULT_ALLOC_FAIL = -8,
    FDB_RESULT_KEY_NOT_FOUND = -9,
    FDB_RESULT_RONLY_VIOLATION = -10,
    FDB_RESULT_COMPACTION_FAIL = -11,
    FDB_RESULT_ITERATOR_FAIL = -12,
    FDB_RESULT_SEEK_FAIL = -13,
    FDB_RESULT_FSYNC_FAIL = -14,
    FDB_RESULT_CHECKSUM_ERROR = -15,
    FDB_RESULT_FILE_CORRUPTION = -16,
    FDB_RESULT_COMPRESSION_FAIL = -17,
    FDB_RESULT_NO_DB_INSTANCE = -18,
    FDB_RESULT_FAIL_BY_ROLLBACK = -19,
    FDB_RESULT_INVALID_CONFIG = -20,
    FDB_RESULT_MANUAL_COMPACTION_FAIL = -21,
    FDB_RESULT_INVALID_COMPACTION_MODE = -22,
    FDB_RESULT_FILE_IS_BUSY = -23,
    FDB_RESULT_FILE_REMOVE_FAIL = -24,
    FDB_RESULT_FILE_RENAME_FAIL = -25,
    FDB_RESULT_TRANSACTION_FAIL = -26,
    FDB_RESULT_FAIL_BY_TRANSACTION = -27,
    FDB_RESULT_FAIL_BY_COMPACTION = -28,
    FDB_RESULT_TOO_LONG_FILENAME = -29,
    FDB_RESULT_INVALID_HANDLE = -30,
    FDB_RESULT_KV_STORE_NOT_FOUND = -31,
    FDB_RESULT_KV_STORE_BUSY = -32,
    FDB_RESULT_INVALID_KV_INSTANCE_NAME = -33,
    FDB_RESULT_INVALID_CMP_FUNCTION = -34,
    FDB_RESULT_IN_USE_BY_COMPACTOR = -35,
    FDB_RESULT_FILE_NOT_OPEN = -36,
    FDB_RESULT_TOO_BIG_BUFFER_CACHE = -37,
    FDB_RESULT_NO_DB_HEADERS = -38,
    FDB_RESULT_HANDLE_BUSY = -39,
    FDB_RESULT_AIO_NOT_SUPPORTED = -40,
    FDB_RESULT_AIO_INIT_FAIL = -41,
    FDB_RESULT_AIO_SUBMIT_FAIL = -42,
    FDB_RESULT_AIO_GETEVENTS_FAIL = -43,
    FDB_RESULT_CRYPTO_ERROR = -44,
    FDB_RESULT_COMPACTION_CANCELLATION = -45,
    FDB_RESULT_SB_INIT_FAIL = -46,
    FDB_RESULT_SB_RACE_CONDITION = -47,
    FDB_RESULT_SB_READ_FAIL = -48,
    FDB_RESULT_FILE_VERSION_NOT_SUPPORTED = -49,
    FDB_RESULT_EPERM = -50,
    FDB_RESULT_EIO = -51,
    FDB_RESULT_ENXIO = -52,
    FDB_RESULT_EBADF = -53,
    FDB_RESULT_ENOMEM = -54,
    FDB_RESULT_EACCESS = -55,
    FDB_RESULT_EFAULT = -56,
    FDB_RESULT_EEXIST = -57,
    FDB_RESULT_ENODEV = -58,
    FDB_RESULT_ENOTDIR = -59,
    FDB_RESULT_EISDIR = -60,
    FDB_RESULT_EINVAL = -61,
    FDB_RESULT_ENFILE = -62,
    FDB_RESULT_EMFILE = -63,
    FDB_RESULT_EFBIG = -64,
    FDB_RESULT_ENOSPC = -65,
    FDB_RESULT_EROFS = -66,
    FDB_RESULT_EOPNOTSUPP = -67,
    FDB_RESULT_ENOBUFS = -68,
    FDB_RESULT_ELOOP = -69,
    FDB_RESULT_ENAMETOOLONG = -70,
    FDB_RESULT_EOVERFLOW = -71,
    FDB_RESULT_EAGAIN = -72,
    FDB_RESULT_CANCELLED = -73,
    FDB_RESULT_ENGINE_NOT_INSTANTIATED = -74,
    FDB_RESULT_LOG_FILE_NOT_FOUND = -75,
    FDB_RESULT_LOCK_FAIL = -76,
}
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
impl ::std::default::Default for __fsid_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type ssize_t = isize;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint_ = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
impl ::std::default::Default for __sigset_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::default::Default for timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::default::Default for timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
impl ::std::default::Default for fd_set {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_attr_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
impl ::std::default::Default for __pthread_internal_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub _bindgen_data_: [u64; 5usize],
}
impl pthread_mutex_t {
    pub unsafe fn __data(&mut self) -> *mut __pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 40usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
impl ::std::default::Default for __pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_mutexattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_mutexattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub _bindgen_data_: [u64; 6usize],
}
impl pthread_cond_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed1 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_condattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_condattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub _bindgen_data_: [u64; 7usize],
}
impl pthread_rwlock_t {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed2 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 56usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct Struct_Unnamed2 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __pad1: ::std::os::raw::c_ulong,
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
impl ::std::default::Default for Struct_Unnamed2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_rwlockattr_t {
    pub _bindgen_data_: [u64; 1usize],
}
impl pthread_rwlockattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrier_t {
    pub _bindgen_data_: [u64; 4usize],
}
impl pthread_barrier_t {
    pub unsafe fn __size(&mut self)
     -> *mut [::std::os::raw::c_char; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrier_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct pthread_barrierattr_t {
    pub _bindgen_data_: [u32; 1usize],
}
impl pthread_barrierattr_t {
    pub unsafe fn __size(&mut self) -> *mut [::std::os::raw::c_char; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::std::os::raw::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::default::Default for pthread_barrierattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_open_flags = uint32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed3 {
    FDB_OPEN_FLAG_CREATE = 1,
    FDB_OPEN_FLAG_RDONLY = 2,
    FDB_OPEN_WITH_LEGACY_CRC = 4,
}
pub type fdb_commit_opt_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u8)]
#[derive(Debug)]
pub enum FDB_COMMIT_OPT {
    FDB_COMMIT_NORMAL = 0,
    FDB_COMMIT_MANUAL_WAL_FLUSH = 1,
}
pub type fdb_seqtree_opt_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed5 { FDB_SEQTREE_NOT_USE = 0, FDB_SEQTREE_USE = 1, }
pub type fdb_durability_opt_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed6 {
    FDB_DRB_NONE = 0,
    FDB_DRB_ODIRECT = 1,
    FDB_DRB_ASYNC = 2,
    FDB_DRB_ODIRECT_ASYNC = 3,
}
pub type fdb_compaction_mode_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed7 { FDB_COMPACTION_MANUAL = 0, FDB_COMPACTION_AUTO = 1, }
pub type fdb_isolation_level_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed8 {
    FDB_ISOLATION_READ_COMMITTED = 2,
    FDB_ISOLATION_READ_UNCOMMITTED = 3,
}
pub type fdb_custom_cmp_fixed =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ::std::os::raw::c_void,
                                               b: *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
pub type fdb_custom_cmp_variable =
    ::std::option::Option<unsafe extern "C" fn(a: *mut ::std::os::raw::c_void,
                                               len_a: size_t,
                                               b: *mut ::std::os::raw::c_void,
                                               len_b: size_t)
                              -> ::std::os::raw::c_int>;
pub type fdb_seqnum_t = uint64_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_doc_struct {
    pub keylen: size_t,
    pub metalen: size_t,
    pub bodylen: size_t,
    pub size_ondisk: size_t,
    pub key: *mut ::std::os::raw::c_void,
    pub seqnum: fdb_seqnum_t,
    pub offset: uint64_t,
    pub meta: *mut ::std::os::raw::c_void,
    pub body: *mut ::std::os::raw::c_void,
    pub deleted: u8,
    pub flags: uint32_t,
}
impl ::std::default::Default for fdb_doc_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_doc = fdb_doc_struct;
pub enum FdbFileHandle { }
pub type fdb_file_handle = FdbFileHandle;
pub enum FdbKvsHandle { }
pub type fdb_kvs_handle = FdbKvsHandle;
pub type fdb_compaction_status = uint32_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed9 {
    FDB_CS_BEGIN = 1,
    FDB_CS_MOVE_DOC = 2,
    FDB_CS_BATCH_MOVE = 4,
    FDB_CS_FLUSH_WAL = 8,
    FDB_CS_END = 16,
    FDB_CS_COMPLETE = 32,
}
pub type fdb_compact_decision = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed10 { FDB_CS_KEEP_DOC = 0, FDB_CS_DROP_DOC = 1, }
pub type fdb_compaction_callback =
    ::std::option::Option<unsafe extern "C" fn(fhandle: *mut fdb_file_handle,
                                               status: fdb_compaction_status,
                                               kv_store_name:
                                                   *const ::std::os::raw::c_char,
                                               doc: *mut fdb_doc,
                                               last_oldfile_offset: uint64_t,
                                               last_newfile_offset: uint64_t,
                                               ctx:
                                                   *mut ::std::os::raw::c_void)
                              -> fdb_compact_decision>;
pub type fdb_encryption_algorithm_t = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed11 {
    FDB_ENCRYPTION_NONE = 0,
    FDB_ENCRYPTION_AES256 = 1,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_encryption_key {
    pub algorithm: fdb_encryption_algorithm_t,
    pub bytes: [uint8_t; 32usize],
}
impl ::std::default::Default for fdb_encryption_key {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cs_off_t = int64_t;
pub enum async_io_handle { }
pub enum fdb_fileops_handle_opaque { }
pub type fdb_fileops_handle = *mut fdb_fileops_handle_opaque;
pub type fdb_ssize_t = ssize_t;
pub type voidref = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct filemgr_ops {
    pub constructor: ::std::option::Option<unsafe extern "C" fn(ctx:
                                                                    *mut ::std::os::raw::c_void)
                                               -> fdb_fileops_handle>,
    pub open: ::std::option::Option<unsafe extern "C" fn(pathname:
                                                             *const ::std::os::raw::c_char,
                                                         fops_handle:
                                                             *mut fdb_fileops_handle,
                                                         flags:
                                                             ::std::os::raw::c_int,
                                                         mode: mode_t)
                                        -> fdb_status>,
    pub pwrite: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                               fdb_fileops_handle,
                                                           buf:
                                                               *mut ::std::os::raw::c_void,
                                                           count: size_t,
                                                           offset: cs_off_t)
                                          -> fdb_ssize_t>,
    pub pread: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                              fdb_fileops_handle,
                                                          buf:
                                                              *mut ::std::os::raw::c_void,
                                                          count: size_t,
                                                          offset: cs_off_t)
                                         -> fdb_ssize_t>,
    pub close: ::std::option::Option<extern "C" fn(fops_handle:
                                                       fdb_fileops_handle)
                                         -> ::std::os::raw::c_int>,
    pub goto_eof: ::std::option::Option<extern "C" fn(fops_handle:
                                                          fdb_fileops_handle)
                                            -> cs_off_t>,
    pub file_size: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                  fdb_fileops_handle,
                                                              filename:
                                                                  *const ::std::os::raw::c_char)
                                             -> cs_off_t>,
    pub fdatasync: ::std::option::Option<extern "C" fn(fops_handle:
                                                           fdb_fileops_handle)
                                             -> ::std::os::raw::c_int>,
    pub fsync: ::std::option::Option<extern "C" fn(fops_handle:
                                                       fdb_fileops_handle)
                                         -> ::std::os::raw::c_int>,
    pub get_errno_str: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                      fdb_fileops_handle,
                                                                  buf:
                                                                      *mut ::std::os::raw::c_char,
                                                                  size:
                                                                      size_t)>,
    pub mmap: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                             fdb_fileops_handle,
                                                         length: size_t,
                                                         aux:
                                                             *mut *mut ::std::os::raw::c_void)
                                        -> voidref>,
    pub munmap: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                               fdb_fileops_handle,
                                                           addr:
                                                               *mut ::std::os::raw::c_void,
                                                           length: size_t,
                                                           aux:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub aio_init: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                 fdb_fileops_handle,
                                                             aio_handle:
                                                                 *mut async_io_handle)
                                            -> ::std::os::raw::c_int>,
    pub aio_prep_read: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                      fdb_fileops_handle,
                                                                  aio_handle:
                                                                      *mut async_io_handle,
                                                                  aio_idx:
                                                                      size_t,
                                                                  read_size:
                                                                      size_t,
                                                                  offset:
                                                                      uint64_t)
                                                 -> ::std::os::raw::c_int>,
    pub aio_submit: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                   fdb_fileops_handle,
                                                               aio_handle:
                                                                   *mut async_io_handle,
                                                               num_subs:
                                                                   ::std::os::raw::c_int)
                                              -> ::std::os::raw::c_int>,
    pub aio_getevents: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                      fdb_fileops_handle,
                                                                  aio_handle:
                                                                      *mut async_io_handle,
                                                                  min:
                                                                      ::std::os::raw::c_int,
                                                                  max:
                                                                      ::std::os::raw::c_int,
                                                                  timeout:
                                                                      ::std::os::raw::c_uint)
                                                 -> ::std::os::raw::c_int>,
    pub aio_destroy: ::std::option::Option<unsafe extern "C" fn(fops_handle:
                                                                    fdb_fileops_handle,
                                                                aio_handle:
                                                                    *mut async_io_handle)
                                               -> ::std::os::raw::c_int>,
    pub get_fs_type: ::std::option::Option<extern "C" fn(src_fd:
                                                             fdb_fileops_handle)
                                               -> ::std::os::raw::c_int>,
    pub copy_file_range: ::std::option::Option<extern "C" fn(fs_type:
                                                                 ::std::os::raw::c_int,
                                                             src_fops_handle:
                                                                 fdb_fileops_handle,
                                                             dst_fops_handle:
                                                                 fdb_fileops_handle,
                                                             src_off:
                                                                 uint64_t,
                                                             dst_off:
                                                                 uint64_t,
                                                             len: uint64_t)
                                                   -> ::std::os::raw::c_int>,
    pub destructor: ::std::option::Option<extern "C" fn(fops_handle:
                                                            fdb_fileops_handle)>,
    pub ctx: *mut ::std::os::raw::c_void,
}
impl ::std::default::Default for filemgr_ops {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_filemgr_ops_t = filemgr_ops;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_config {
    pub chunksize: uint16_t,
    pub blocksize: uint32_t,
    pub buffercache_size: uint64_t,
    pub wal_threshold: uint64_t,
    pub wal_flush_before_commit: u8,
    pub auto_commit: u8,
    pub purging_interval: uint32_t,
    pub seqtree_opt: fdb_seqtree_opt_t,
    pub durability_opt: fdb_durability_opt_t,
    pub flags: fdb_open_flags,
    pub compaction_buf_maxsize: uint32_t,
    pub cleanup_cache_onclose: u8,
    pub compress_document_body: u8,
    pub compaction_mode: fdb_compaction_mode_t,
    pub compaction_threshold: uint8_t,
    pub compaction_minimum_filesize: uint64_t,
    pub compactor_sleep_duration: uint64_t,
    pub multi_kv_instances: u8,
    pub prefetch_duration: uint64_t,
    pub num_wal_partitions: uint16_t,
    pub num_bcache_partitions: uint16_t,
    pub compaction_cb: fdb_compaction_callback,
    pub compaction_cb_mask: uint32_t,
    pub compaction_cb_ctx: *mut ::std::os::raw::c_void,
    pub max_writer_lock_prob: size_t,
    pub num_compactor_threads: size_t,
    pub num_bgflusher_threads: size_t,
    pub encryption_key: fdb_encryption_key,
    pub block_reusing_threshold: size_t,
    pub num_keeping_headers: size_t,
    pub breakpad_minidump_dir: *const ::std::os::raw::c_char,
    pub custom_file_ops: *mut fdb_filemgr_ops_t,
    pub num_background_threads: size_t,
    pub bcache_flush_limit: size_t,
}
impl ::std::default::Default for fdb_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_kvs_config {
    pub create_if_missing: u8,
    pub custom_cmp: fdb_custom_cmp_variable,
}
impl ::std::default::Default for fdb_kvs_config {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_log_callback =
    ::std::option::Option<unsafe extern "C" fn(err_code:
                                                   ::std::os::raw::c_int,
                                               err_msg:
                                                   *const ::std::os::raw::c_char,
                                               ctx_data:
                                                   *mut ::std::os::raw::c_void)>;
pub type fdb_fatal_error_callback = ::std::option::Option<extern "C" fn()>;
pub type fdb_iterator_opt_t = uint16_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed12 {
    FDB_ITR_NONE = 0,
    FDB_ITR_NO_DELETES = 2,
    FDB_ITR_SKIP_MIN_KEY = 4,
    FDB_ITR_SKIP_MAX_KEY = 8,
    FDB_ITR_NO_VALUES = 16,
}
pub type fdb_iterator_seek_opt_t = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed13 { FDB_ITR_SEEK_HIGHER = 0, FDB_ITR_SEEK_LOWER = 1, }
pub enum FdbIterator { }
pub type fdb_iterator = FdbIterator;
pub type fdb_changes_decision = ::std::os::raw::c_int;
#[derive(Copy, Clone)]
#[repr(i32)]
#[derive(Debug)]
pub enum Enum_Unnamed14 {
    FDB_CHANGES_PRESERVE = 1,
    FDB_CHANGES_CLEAN = 0,
    FDB_CHANGES_CANCEL = -1,
}
pub type fdb_changes_callback_fn =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut fdb_kvs_handle,
                                               doc: *mut fdb_doc,
                                               ctx:
                                                   *mut ::std::os::raw::c_void)
                              -> fdb_changes_decision>;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_file_info {
    pub filename: *const ::std::os::raw::c_char,
    pub new_filename: *const ::std::os::raw::c_char,
    pub doc_count: uint64_t,
    pub deleted_count: uint64_t,
    pub space_used: uint64_t,
    pub file_size: uint64_t,
    pub num_kv_stores: size_t,
}
impl ::std::default::Default for fdb_file_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_kvs_info {
    pub name: *const ::std::os::raw::c_char,
    pub last_seqnum: fdb_seqnum_t,
    pub doc_count: uint64_t,
    pub deleted_count: uint64_t,
    pub space_used: uint64_t,
    pub file: *mut fdb_file_handle,
}
impl ::std::default::Default for fdb_kvs_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_kvs_ops_info {
    pub num_sets: uint64_t,
    pub num_dels: uint64_t,
    pub num_commits: uint64_t,
    pub num_compacts: uint64_t,
    pub num_gets: uint64_t,
    pub num_iterator_gets: uint64_t,
    pub num_iterator_moves: uint64_t,
}
impl ::std::default::Default for fdb_kvs_ops_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_latency_stat_type = uint8_t;
#[derive(Copy, Clone)]
#[repr(u32)]
#[derive(Debug)]
pub enum Enum_Unnamed15 {
    FDB_LATENCY_SETS = 0,
    FDB_LATENCY_GETS = 1,
    FDB_LATENCY_COMMITS = 2,
    FDB_LATENCY_SNAP_INMEM = 3,
    FDB_LATENCY_SNAP_DUR = 4,
    FDB_LATENCY_COMPACTS = 5,
    FDB_LATENCY_ITR_INIT = 6,
    FDB_LATENCY_ITR_SEQ_INIT = 7,
    FDB_LATENCY_ITR_NEXT = 8,
    FDB_LATENCY_ITR_PREV = 9,
    FDB_LATENCY_ITR_GET = 10,
    FDB_LATENCY_ITR_GET_META = 11,
    FDB_LATENCY_ITR_SEEK = 12,
    FDB_LATENCY_ITR_SEEK_MAX = 13,
    FDB_LATENCY_ITR_SEEK_MIN = 14,
    FDB_LATENCY_ITR_CLOSE = 15,
    FDB_LATENCY_OPEN = 16,
    FDB_LATENCY_KVS_OPEN = 17,
    FDB_LATENCY_SNAP_CLONE = 18,
    FDB_LATENCY_WAL_INS = 19,
    FDB_LATENCY_WAL_FIND = 20,
    FDB_LATENCY_WAL_COMMIT = 21,
    FDB_LATENCY_WAL_FLUSH = 22,
    FDB_LATENCY_WAL_RELEASE = 23,
    FDB_LATENCY_NUM_STATS = 24,
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_latency_stat {
    pub lat_count: uint64_t,
    pub lat_min: uint32_t,
    pub lat_max: uint32_t,
    pub lat_avg: uint32_t,
}
impl ::std::default::Default for fdb_latency_stat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_kvs_name_list {
    pub num_kvs_names: size_t,
    pub kvs_names: *mut *mut ::std::os::raw::c_char,
}
impl ::std::default::Default for fdb_kvs_name_list {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_kvs_commit_marker_t {
    pub kv_store_name: *mut ::std::os::raw::c_char,
    pub seqnum: fdb_seqnum_t,
}
impl ::std::default::Default for fdb_kvs_commit_marker_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_snapshot_marker_t = uint64_t;
#[repr(C)]
#[derive(Copy, Clone)]
#[derive(Debug)]
pub struct fdb_snapshot_info_t {
    pub marker: fdb_snapshot_marker_t,
    pub num_kvs_markers: int64_t,
    pub kvs_markers: *mut fdb_kvs_commit_marker_t,
}
impl ::std::default::Default for fdb_snapshot_info_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fdb_handle_stats_cb =
    ::std::option::Option<unsafe extern "C" fn(handle: *mut fdb_kvs_handle,
                                               stat:
                                                   *const ::std::os::raw::c_char,
                                               value: uint64_t,
                                               ctx:
                                                   *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
    pub fn fdb_init(config: *const fdb_config) -> fdb_status;
    pub fn fdb_get_default_config() -> fdb_config;
    pub fn fdb_get_default_kvs_config() -> fdb_kvs_config;
    pub fn fdb_open(ptr_fhandle: *mut *mut fdb_file_handle,
                    filename: *const ::std::os::raw::c_char,
                    fconfig: *const fdb_config) -> fdb_status;
    pub fn fdb_open_custom_cmp(ptr_fhandle: *mut *mut fdb_file_handle,
                               filename: *const ::std::os::raw::c_char,
                               fconfig: *mut fdb_config,
                               num_functions: size_t,
                               kvs_names: *mut *mut ::std::os::raw::c_char,
                               functions: *mut fdb_custom_cmp_variable)
     -> fdb_status;
    pub fn fdb_set_log_callback(handle: *mut fdb_kvs_handle,
                                log_callback: fdb_log_callback,
                                ctx_data: *mut ::std::os::raw::c_void)
     -> fdb_status;
    pub fn fdb_set_fatal_error_callback(err_callback:
                                            fdb_fatal_error_callback);
    pub fn fdb_doc_create(doc: *mut *mut fdb_doc,
                          key: *const ::std::os::raw::c_void, keylen: size_t,
                          meta: *const ::std::os::raw::c_void,
                          metalen: size_t,
                          body: *const ::std::os::raw::c_void,
                          bodylen: size_t) -> fdb_status;
    pub fn fdb_doc_update(doc: *mut *mut fdb_doc,
                          meta: *const ::std::os::raw::c_void,
                          metalen: size_t,
                          body: *const ::std::os::raw::c_void,
                          bodylen: size_t) -> fdb_status;
    pub fn fdb_doc_set_seqnum(doc: *mut fdb_doc, seqnum: fdb_seqnum_t);
    pub fn fdb_doc_free(doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_byseq(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_metaonly_byseq(handle: *mut fdb_kvs_handle,
                                  doc: *mut fdb_doc) -> fdb_status;
    pub fn fdb_get_byoffset(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_set(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_del(handle: *mut fdb_kvs_handle, doc: *mut fdb_doc)
     -> fdb_status;
    pub fn fdb_get_kv(handle: *mut fdb_kvs_handle,
                      key: *const ::std::os::raw::c_void, keylen: size_t,
                      value_out: *mut *mut ::std::os::raw::c_void,
                      valuelen_out: *mut size_t) -> fdb_status;
    pub fn fdb_set_kv(handle: *mut fdb_kvs_handle,
                      key: *const ::std::os::raw::c_void, keylen: size_t,
                      value: *const ::std::os::raw::c_void, valuelen: size_t)
     -> fdb_status;
    pub fn fdb_del_kv(handle: *mut fdb_kvs_handle,
                      key: *const ::std::os::raw::c_void, keylen: size_t)
     -> fdb_status;
    pub fn fdb_free_block(ptr: *mut ::std::os::raw::c_void) -> fdb_status;
    pub fn fdb_commit(fhandle: *mut fdb_file_handle, opt: fdb_commit_opt_t)
     -> fdb_status;
    pub fn fdb_snapshot_open(handle_in: *mut fdb_kvs_handle,
                             handle_out: *mut *mut fdb_kvs_handle,
                             snapshot_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_rollback(handle_ptr: *mut *mut fdb_kvs_handle,
                        rollback_seqnum: fdb_seqnum_t) -> fdb_status;
    pub fn fdb_rollback_all(fhandle: *mut fdb_file_handle,
                            marker: fdb_snapshot_marker_t) -> fdb_status;
    pub fn fdb_iterator_init(handle: *mut fdb_kvs_handle,
                             iterator: *mut *mut fdb_iterator,
                             min_key: *const ::std::os::raw::c_void,
                             min_keylen: size_t,
                             max_key: *const ::std::os::raw::c_void,
                             max_keylen: size_t, opt: fdb_iterator_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_sequence_init(handle: *mut fdb_kvs_handle,
                                      iterator: *mut *mut fdb_iterator,
                                      min_seq: fdb_seqnum_t,
                                      max_seq: fdb_seqnum_t,
                                      opt: fdb_iterator_opt_t) -> fdb_status;
    pub fn fdb_iterator_prev(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_next(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_iterator_get(iterator: *mut fdb_iterator,
                            doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_get_metaonly(iterator: *mut fdb_iterator,
                                     doc: *mut *mut fdb_doc) -> fdb_status;
    pub fn fdb_iterator_seek(iterator: *mut fdb_iterator,
                             seek_key: *const ::std::os::raw::c_void,
                             seek_keylen: size_t,
                             direction: fdb_iterator_seek_opt_t)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_min(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_seek_to_max(iterator: *mut fdb_iterator)
     -> fdb_status;
    pub fn fdb_iterator_close(iterator: *mut fdb_iterator) -> fdb_status;
    pub fn fdb_changes_since(handle: *mut fdb_kvs_handle, since: fdb_seqnum_t,
                             opt: fdb_iterator_opt_t,
                             callback: fdb_changes_callback_fn,
                             ctx: *mut ::std::os::raw::c_void) -> fdb_status;
    pub fn fdb_compact(fhandle: *mut fdb_file_handle,
                       new_filename: *const ::std::os::raw::c_char)
     -> fdb_status;
    pub fn fdb_compact_with_cow(fhandle: *mut fdb_file_handle,
                                new_filename: *const ::std::os::raw::c_char)
     -> fdb_status;
    pub fn fdb_compact_upto(fhandle: *mut fdb_file_handle,
                            new_filename: *const ::std::os::raw::c_char,
                            marker: fdb_snapshot_marker_t) -> fdb_status;
    pub fn fdb_compact_upto_with_cow(fhandle: *mut fdb_file_handle,
                                     new_filename:
                                         *const ::std::os::raw::c_char,
                                     marker: fdb_snapshot_marker_t)
     -> fdb_status;
    pub fn fdb_cancel_compaction(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_set_daemon_compaction_interval(fhandle: *mut fdb_file_handle,
                                              interval: size_t) -> fdb_status;
    pub fn fdb_rekey(fhandle: *mut fdb_file_handle,
                     new_key: fdb_encryption_key) -> fdb_status;
    pub fn fdb_get_buffer_cache_used() -> size_t;
    pub fn fdb_estimate_space_used(fhandle: *mut fdb_file_handle) -> size_t;
    pub fn fdb_estimate_space_used_from(fhandle: *mut fdb_file_handle,
                                        marker: fdb_snapshot_marker_t)
     -> size_t;
    pub fn fdb_get_file_info(fhandle: *mut fdb_file_handle,
                             info: *mut fdb_file_info) -> fdb_status;
    pub fn fdb_get_kvs_info(handle: *mut fdb_kvs_handle,
                            info: *mut fdb_kvs_info) -> fdb_status;
    pub fn fdb_get_kvs_ops_info(handle: *mut fdb_kvs_handle,
                                info: *mut fdb_kvs_ops_info) -> fdb_status;
    pub fn fdb_get_latency_stats(fhandle: *mut fdb_file_handle,
                                 stats: *mut fdb_latency_stat,
                                 type_: fdb_latency_stat_type) -> fdb_status;
    pub fn fdb_get_latency_histogram(fhandle: *mut fdb_file_handle,
                                     stats: *mut *mut ::std::os::raw::c_char,
                                     stats_length: *mut size_t,
                                     type_: fdb_latency_stat_type)
     -> fdb_status;
    pub fn fdb_latency_stat_name(type_: fdb_latency_stat_type)
     -> *const ::std::os::raw::c_char;
    pub fn fdb_get_kvs_seqnum(handle: *mut fdb_kvs_handle,
                              seqnum: *mut fdb_seqnum_t) -> fdb_status;
    pub fn fdb_get_kvs_name_list(fhandle: *mut fdb_file_handle,
                                 kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_get_all_snap_markers(fhandle: *mut fdb_file_handle,
                                    markers: *mut *mut fdb_snapshot_info_t,
                                    size: *mut uint64_t) -> fdb_status;
    pub fn fdb_get_available_rollback_seq(handle: *mut fdb_kvs_handle,
                                          request_seqno: uint64_t)
     -> fdb_seqnum_t;
    pub fn fdb_free_snap_markers(markers: *mut fdb_snapshot_info_t,
                                 size: uint64_t) -> fdb_status;
    pub fn fdb_free_kvs_name_list(kvs_name_list: *mut fdb_kvs_name_list)
     -> fdb_status;
    pub fn fdb_switch_compaction_mode(fhandle: *mut fdb_file_handle,
                                      mode: fdb_compaction_mode_t,
                                      new_threshold: size_t) -> fdb_status;
    pub fn fdb_close(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_destroy(filename: *const ::std::os::raw::c_char,
                       fconfig: *mut fdb_config) -> fdb_status;
    pub fn fdb_shutdown() -> fdb_status;
    pub fn fdb_begin_transaction(fhandle: *mut fdb_file_handle,
                                 isolation_level: fdb_isolation_level_t)
     -> fdb_status;
    pub fn fdb_end_transaction(fhandle: *mut fdb_file_handle,
                               opt: fdb_commit_opt_t) -> fdb_status;
    pub fn fdb_abort_transaction(fhandle: *mut fdb_file_handle) -> fdb_status;
    pub fn fdb_kvs_open(fhandle: *mut fdb_file_handle,
                        ptr_handle: *mut *mut fdb_kvs_handle,
                        kvs_name: *const ::std::os::raw::c_char,
                        config: *const fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_open_default(fhandle: *mut fdb_file_handle,
                                ptr_handle: *mut *mut fdb_kvs_handle,
                                config: *mut fdb_kvs_config) -> fdb_status;
    pub fn fdb_kvs_close(handle: *mut fdb_kvs_handle) -> fdb_status;
    pub fn fdb_kvs_remove(fhandle: *mut fdb_file_handle,
                          kvs_name: *const ::std::os::raw::c_char)
     -> fdb_status;
    pub fn fdb_set_block_reusing_params(fhandle: *mut fdb_file_handle,
                                        block_reusing_threshold: size_t,
                                        num_keeping_headers: size_t)
     -> fdb_status;
    pub fn fdb_error_msg(err_code: fdb_status)
     -> *const ::std::os::raw::c_char;
    pub fn fdb_get_lib_version() -> *const ::std::os::raw::c_char;
    pub fn fdb_get_file_version(fhandle: *mut fdb_file_handle)
     -> *const ::std::os::raw::c_char;
    pub fn fdb_get_default_file_ops() -> *mut fdb_filemgr_ops_t;
    pub fn fdb_fetch_handle_stats(handle: *mut fdb_kvs_handle,
                                  callback: fdb_handle_stats_cb,
                                  ctx: *mut ::std::os::raw::c_void)
     -> fdb_status;
}

#[cfg(test)]
mod tests;
